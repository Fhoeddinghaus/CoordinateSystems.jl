var documenterSearchIndex = {"docs":
[{"location":"#CoordinateSystems.jl-Documentation","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.jl Documentation","text":"","category":"section"},{"location":"#Installation","page":"CoordinateSystems.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.jl Documentation","text":"] add git@github.com:Fhoeddinghaus/CoordinateSystems.jl.git","category":"page"},{"location":"","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.jl Documentation","text":"or ","category":"page"},{"location":"","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.jl Documentation","text":"] add https://github.com/Fhoeddinghaus/CoordinateSystems.jl.git","category":"page"},{"location":"#Index","page":"CoordinateSystems.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.jl Documentation","text":"","category":"page"},{"location":"#API","page":"CoordinateSystems.jl Documentation","title":"API","text":"","category":"section"},{"location":"#CoordinateSystems.CartesianCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.CartesianCoordinates","text":"mutable struct CartesianCoordinates{T <: Real, dim} <: Coordinates{T, dim}\n\nA mutable struct representing Cartesian coordinates in a dim-dimensional space, where T is the type of the coordinate values (typically Float64, Int or BigFloat).\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.CircleCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.CircleCoordinates","text":"CircleCoordinates{T} <: GeneralSphericalCoordinates{T, Val{1}, Nothing, 2}\n\nType for circular coordinates in 2D space, where T is the type of the coordinate values (typically Float64, Int or BigFloat). The coordinates are represented as (azi), with polar set to nothing and r fixed to 1.\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.Coordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.Coordinates","text":"abstract type Coordinates{T <: Real, dim} end\n\nAn abstract type representing a coordinate system in a dim-dimensional space, where T is the type of the coordinate values (typically Float64, Int or BigFloat).\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.GeneralSphericalCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.GeneralSphericalCoordinates","text":"mutable struct GeneralSphericalCoordinates{T <: Real, Tr <: Union{Val{1}, T}, Tp <: Union{Nothing, T}, dim} <: Coordinates{T, dim}\n\nA mutable struct representing spherical coordinates in a dim-dimensional space, where T is the type of the coordinate values (typically Float64, Int or BigFloat), Tr is the type of the radial coordinate (can be fixed to 1 for unit sphere), Tp is the type of the polar coordinate (can be nothing for 2D polar coordinates), and dim is the dimension of the coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.PlanarCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.PlanarCoordinates","text":"PlanarCoordinates{T} <: CartesianCoordinates{T, 2}\n\nType for 2D Cartesian coordinates, where T is the type of the coordinate values (typically Float64, Int or BigFloat).\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.PolarCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.PolarCoordinates","text":"PolarCoordinates{T} <: GeneralSphericalCoordinates{T, T, Nothing, 2}\n\nType for polar coordinates in 2D space, where T is the type of the coordinate values (typically Float64, Int or BigFloat). The coordinates are represented as (r, azi), with polar set to nothing.\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.SpatialCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.SpatialCoordinates","text":"SpatialCoordinates{T} <: CartesianCoordinates{T, 3}\n\nType for 3D Cartesian coordinates, where T is the type of the coordinate values (typically Float64, Int or BigFloat).\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.SphereCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.SphereCoordinates","text":"SphereCoordinates{T} <: GeneralSphericalCoordinates{T, Val{1}, T, 3}\n\nType for spherical coordinates on the unit sphere in 3D space, where T is the type of the coordinate values (typically Float64, Int or BigFloat). The coordinates are represented as (polar, azi), with r fixed to 1.\n\n\n\n\n\n","category":"type"},{"location":"#CoordinateSystems.SphericalCoordinates","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.SphericalCoordinates","text":"SphericalCoordinates{T} <: GeneralSphericalCoordinates{T, T, T, 3}\n\nType for full spherical coordinates in 3D space, where T is the type of the coordinate values (typically Float64, Int or BigFloat). The coordinates are represented as (r, polar, azi).\n\n\n\n\n\n","category":"type"},{"location":"#Base.convert-Tuple{Type{PolarCoordinates}, CircleCoordinates}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{PolarCoordinates}, c::CircleCoordinates)\n\nConverts a CircleCoordinates to PolarCoordinates. The radius is set to 1.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Tuple{Type{SphericalCoordinates}, SphereCoordinates}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{SphericalCoordinates}, s::SphereCoordinates)\n\nConverts a SphereCoordinates to SphericalCoordinates. The radius is set to 1.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T2}, Tuple{T1}, Tuple{Type{T1}, T2}} where {T1<:Union{PolarCoordinates, CircleCoordinates}, T2<:Union{SphericalCoordinates, SphereCoordinates}}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{T1}, g::T2; truncate::Bool=false) where {T1 <: Union{PolarCoordinates, CircleCoordinates}, T2 <: Union{SphericalCoordinates, SphereCoordinates}}\n\nConverts SphericalCoordinates or SphereCoordinates to PolarCoordinates or CircleCoordinates. \n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T2}, Tuple{T1}, Tuple{Type{T1}, T2}} where {T1<:Union{SphericalCoordinates, SphereCoordinates}, T2<:Union{PolarCoordinates, CircleCoordinates}}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{T1}, g::T2; truncate::Bool=false) where {T1 <: Union{SphericalCoordinates, SphereCoordinates}, T2 <: Union{PolarCoordinates, CircleCoordinates}}\n\nConverts PolarCoordinates or CircleCoordinates to SphericalCoordinates or SphereCoordinates.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T}, Tuple{Type{CircleCoordinates}, PolarCoordinates{T}}} where T<:Real","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{CircleCoordinates}, p::PolarCoordinates{T}; truncate::Bool=false) where {T <: Real}\n\nConverts a PolarCoordinates{T} to CircleCoordinates{T}. If the radius p.r is approximately 1 or truncate is set to true, the conversion projects the coordinates onto the unit circle. Otherwise, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T}, Tuple{Type{SphereCoordinates}, SphericalCoordinates{T}}} where T<:Real","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{SphereCoordinates}, b::SphericalCoordinates{T}; truncate::Bool=false) where {T <: Real}\n\nConverts a SphericalCoordinates{T} to SphereCoordinates{T}. If the radius b.r is approximately 1 or truncate is set to true, the conversion projects the coordinates onto the unit sphere. Otherwise, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T}, Tuple{Type{T}, CartesianCoordinates}} where T<:Union{PolarCoordinates, CircleCoordinates}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{T}, x::CartesianCoordinates; truncate::Bool=false) where {T <: Union{CircleCoordinates, PolarCoordinates}}\n\nConverts a CartesianCoordinates with dimension 2 to either CircleCoordinates or PolarCoordinates. If truncate is set to true, the conversion projects the coordinates onto the unit circle or unit polar coordinates, respectively. If truncate is false, the conversion requires the Cartesian coordinates to have a norm close to 1.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T}, Tuple{Type{T}, CartesianCoordinates}} where T<:Union{SphericalCoordinates, SphereCoordinates}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{T}, x::CartesianCoordinates; truncate::Bool=false) where {T <: Union{SphereCoordinates, SphericalCoordinates}}\n\nConverts a CartesianCoordinates with dimension 3 to either SphereCoordinates or SphericalCoordinates. If truncate is set to true, the conversion projects the coordinates onto the unit sphere or spherical coordinates, respectively. If truncate is false, the conversion requires the Cartesian coordinates to have a norm close to 1.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{T}, Tuple{Type{T}, GeneralSphericalCoordinates}} where T<:CartesianCoordinates","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{T}, g::GeneralSphericalCoordinates) where {T <: CartesianCoordinates}\n\nConverts a GeneralSphericalCoordinates to a CartesianCoordinates{T, dim} where dim is either 2 or 3. The conversion uses the spherical coordinates to compute the Cartesian coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{dim}, Tuple{T}, Tuple{Type{Vector}, CartesianCoordinates{T, dim}}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{Vector}, x::CartesianCoordinates{T, dim}) where {T <: Real, dim}\n\nConverts a CartesianCoordinates{T, dim} to a Vector{T} by extracting the coordinate values.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{dim}, Tuple{T}, Tuple{dim1}, Tuple{T1}, Tuple{Type{CartesianCoordinates{T1, dim1}}, CartesianCoordinates{T, dim}}} where {T1<:Real, dim1, T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.convert","text":"function Base.convert(::Type{CartesianCoordinates{T1, dim1}}, x::CartesianCoordinates{T, dim}) where {T1 <: Real, dim1, T <: Real, dim}\n\nConverts a CartesianCoordinates{T, dim} to CartesianCoordinates{T1, dim1} by resizing the vector and converting the elements to type T1. If dim1 is greater than dim, the additional elements are set to zero.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Union{Int64, Symbol, AbstractVector{Int64}}}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.getindex","text":"function Base.getindex(x::CartesianCoordinates{T, dim}, keys::Union{Int, Symbol, AbstractVector{Int}})  where {T <: Real, dim}\n\nReturns the value of the coordinate or property specified by keys from the CartesianCoordinates{T, dim} instance x. The keys can be an integer index, a symbol representing a property, or an array of indices.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Union{Tuple{dim}, Tuple{Tp}, Tuple{Tr}, Tuple{T}, Tuple{GeneralSphericalCoordinates{T, Tr, Tp, dim}, Symbol}} where {T, Tr, Tp, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.getproperty","text":"function Base.getproperty(s::GeneralSphericalCoordinates{T, Tr, Tp, dim}, i::Symbol) where {T, Tr, Tp, dim}\n\nReturns the value of the property i from the GeneralSphericalCoordinates{T, Tr, Tp, dim} instance s. The properties include :r, :polar (or :θ, :theta), and :azi (or :φ, :phi, :azimuth). The dimension is also included as :dim. If an invalid property is specified, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Symbol}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.getproperty","text":"function Base.getproperty(x::CartesianCoordinates{T, dim}, i::Symbol) where {T <: Real, dim}\n\nReturns the value of the property i from the CartesianCoordinates{T, dim} instance x. The properties include :dim, :xs, and coordinate values like :x, :y, :z, or :xN for dimensions greater than 3.\n\n\n\n\n\n","category":"method"},{"location":"#Base.iterate-Union{Tuple{GeneralSphericalCoordinates{T, Tr, Tp, dim}}, Tuple{dim}, Tuple{Tp}, Tuple{Tr}, Tuple{T}, Tuple{GeneralSphericalCoordinates{T, Tr, Tp, dim}, Int64}} where {T, Tr, Tp, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.iterate","text":"function Base.iterate(s::GeneralSphericalCoordinates{T, Tr, Tp, dim}, state::Int64=1) where {T, Tr, Tp, dim}\n\nIterates over the properties of a GeneralSphericalCoordinates{T, Tr, Tp, dim} instance s. Order: r, polar, azi.\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Union{Tuple{Coordinates{T, dim}}, Tuple{dim}, Tuple{T}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.length","text":"function Base.length(x::Coordinates{T, dim}) where {T <: Real, dim}\n\nReturns the dimension of the coordinate system represented by x, which is an instance of Coordinates{T, dim}.\n\n\n\n\n\n","category":"method"},{"location":"#Base.propertynames-Union{Tuple{CartesianCoordinates{T, dim}}, Tuple{dim}, Tuple{T}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.propertynames","text":"function Base.propertynames(x::CartesianCoordinates{T, dim}) where {T <: Real, dim}\n\nReturns a tuple of property names for the CartesianCoordinates{T, dim} instance x. The properties include :xs, :dim, and coordinate values like :x, :y, :z, or :xN for dimensions greater than 3.\n\n\n\n\n\n","category":"method"},{"location":"#Base.propertynames-Union{Tuple{GeneralSphericalCoordinates{T, Tr, Tp, dim}}, Tuple{dim}, Tuple{Tp}, Tuple{Tr}, Tuple{T}} where {T, Tr, Tp, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.propertynames","text":"function Base.propertynames(s::GeneralSphericalCoordinates{T, Tr, Tp, dim}) where {T, Tr, Tp, dim}\n\nReturns a tuple of property names for the GeneralSphericalCoordinates{T, Tr, Tp, dim} instance s. The properties include :r, :polar (or :θ, :theta), and :azi (or :φ, :phi, :azimuth). The dimension is also included as :dim.\n\n\n\n\n\n","category":"method"},{"location":"#Base.resize!-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Int64}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.resize!","text":"function Base.resize!(x::CartesianCoordinates{T, dim}, new_dim::Int) where {T <: Real, dim}\n\nResizes the CartesianCoordinates{T, dim} instance x to a new dimension new_dim. If new_dim is greater than the current dimension, the additional elements are set to zero. If new_dim is less than the current dimension, the excess elements are removed.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Any, Union{Int64, Symbol, AbstractVector{Int64}}}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.setindex!","text":"function Base.setindex!(x::CartesianCoordinates{T, dim}, val, keys::Union{Int, Symbol, AbstractVector{Int}}) where {T <: Real, dim}\n\nSets the value of the coordinate or property specified by keys in the CartesianCoordinates{T, dim} instance x to val. The keys can be an integer index, a symbol representing a property, or an array of indices. If an invalid property is specified, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setproperty!-Union{Tuple{dim}, Tuple{Tp}, Tuple{Tr}, Tuple{T}, Tuple{GeneralSphericalCoordinates{T, Tr, Tp, dim}, Symbol, Any}} where {T, Tr, Tp, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.setproperty!","text":"function Base.setproperty!(s::GeneralSphericalCoordinates{T, Tr, Tp, dim}, i::Symbol, val) where {T, Tr, Tp, dim}\n\nSets the property i of the GeneralSphericalCoordinates{T, Tr, Tp, dim} instance s to the value val. The properties include :r, :polar (or :θ, :theta), and :azi (or :φ, :phi, :azimuth). If an invalid property is specified, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setproperty!-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Symbol, Any}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.setproperty!","text":"function Base.setproperty!(x::CartesianCoordinates{T, dim}, i::Symbol, val) where {T <: Real, dim}\n\nSets the property i of the CartesianCoordinates{T, dim} instance x to the value val. The properties include :dim, :xs, and coordinate values like :x, :y, :z, or :xN for dimensions greater than 3. If an invalid property is specified, an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Union{Tuple{dim}, Tuple{T}, Tuple{IO, CartesianCoordinates{T, dim}}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"Base.show","text":"function Base.show(io::IO, x::Coordinates)\n\nDisplays the Coordinates{T, dim} instance x in a human-readable format. The output includes the type of coordinates, the type of the coordinate values, and the dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CoordinateSystems.trunc_dim-Union{Tuple{dim}, Tuple{T}, Tuple{CartesianCoordinates{T, dim}, Any}} where {T<:Real, dim}","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.trunc_dim","text":"function trunc_dim(x::CartesianCoordinates{T, dim}, tdim) where {T <: Real, dim}\n\nTruncates the dimension of a CartesianCoordinates{T, dim} instance x by removing the coordinate at index tdim. The resulting coordinates are returned as a new CartesianCoordinates instance with one less dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CoordinateSystems.@forward-Tuple{Any, Any}","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.@forward","text":"@forward T.x functions...\n\nDefine methods for functions on type T, which call the relevant function on the field x.\n\nExample\n\nstruct Wrapper\n    x\nend\n\n@forward Wrapper.x  Base.sqrt                                  # now sqrt(Wrapper(4.0)) == 2.0\n@forward Wrapper.x  Base.length, Base.getindex, Base.iterate   # several forwarded functions are put in a tuple\n@forward Wrapper.x (Base.length, Base.getindex, Base.iterate)  # equivalent to above\n\n\n\n\n\n","category":"macro"},{"location":"#CoordinateSystems.@forward_binary-Tuple{Any, Any}","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.@forward_binary","text":"@forward_binary T.x functions...\n\nSee @forward, but for functions with (first) two arguments of type T, e.g. Base.isequal.\n\n\n\n\n\n","category":"macro"},{"location":"#CoordinateSystems.@forward_binary_preserve_type-Tuple{Any, Any}","page":"CoordinateSystems.jl Documentation","title":"CoordinateSystems.@forward_binary_preserve_type","text":"@forward_binary_preserve_type T.x functions...\n\nSee @forward and @forward_binary, but for functions, that return a result with the same type as the inputs, e.g. Base.:(+). Works only, if function changes exactly one field!  Resulting type is inferred using promote_type, which might fail in certain cases. Just try not mixing field types.\n\n\n\n\n\n","category":"macro"}]
}
